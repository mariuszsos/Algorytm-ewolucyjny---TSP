using System;
using System.Linq;
using System.Diagnostics;
using System.Threading;

namespace Algorytm_ewolucyjny___TSP
{
    public static class Extensions
    {
        public static int findIndex<T>(this T[] array, T item)
        {
            return Array.IndexOf(array, item);
        }
    }
    class Program
    {
        static Random los = new Random();
        static double[,] miasta = new double[,]
        {
            //{ 20833.3333, 17100.0000 }, //1 
            //{ 20900.0000, 17066.6667 }, //2
            //{ 21300.0000, 13016.6667 }, //3
            //{ 21600.0000, 14150.0000 }, //4
            //{ 21600.0000, 14966.6667 }, //5
            //{ 21600.0000, 16500.0000 }, //6
            //{ 22183.3333, 13133.3333 }, //7 
            //{ 22583.3333, 14300.0000 }, //8
            //{ 22683.3333, 12716.6667 }, //9
            //{ 23616.6667, 15866.6667 }, //10
            //{ 23700.0000, 15933.3333 }, //11   
            //{ 23883.3333, 14533.3333 }, //12
            //{ 24166.6667, 13250.0000 }, //13
            //{ 25149.1667, 12365.8333 }, //14
            //{ 26133.3333, 14500.0000 }, //15
            //{ 26150.0000, 10550.0000 }, //16
            //{ 26283.3333, 12766.6667 }, //17
            //{ 26433.3333, 13433.3333 }, //18
            //{ 26550.0000, 13850.0000 }, //19
            //{ 26733.3333, 11683.3333 }, //20
            //{ 27026.1111, 13051.9444 }, //21
            //{ 27096.1111, 13415.8333 }, //22
            //{ 27153.6111, 13203.3333 }, //23
            //{ 27166.6667, 9833.3333 },  //24
            //{ 27233.3333, 10450.0000 }, //25
            //{ 27233.3333, 11783.3333 }, //26
            //{ 27266.6667, 10383.3333 }, //27
            //{ 27433.3333, 12400.0000 }, //28
            //{ 27462.5000, 12992.2222 }  //29
{   11003.611100    ,   42102.500000    }   , //Djibouti - 38 Cities
{   11108.611100    ,   42373.888900    }   ,
{   11133.333300    ,   42885.833300    }   ,
{   11155.833300    ,   42712.500000    }   ,
{   11183.333300    ,   42933.333300    }   ,
{   11297.500000    ,   42853.333300    }   ,
{   11310.277800    ,   42929.444400    }   ,
{   11416.666700    ,   42983.333300    }   ,
{   11423.888900    ,   43000.277800    }   ,
{   11438.33330 ,    42057.222200  }   ,
{   11461.11110 ,    43252.777800  }   ,
{   11485.55560 ,    43187.222200  }   ,
{   11503.05560 ,    42855.277800  }   ,
{   11511.38890 ,    42106.388900  }   ,
{   11522.22220 ,    42841.944400  }   ,
{   11569.44440 ,    43136.666700  }   ,
{   11583.33330 ,    43150.000000  }   ,
{   11595.00000 ,    43148.055600  }   ,
{   11600.00000 ,    43150.000000  }   ,
{   11690.55560 ,    42686.666700  }   ,
{   11715.83330 ,    41836.111100  }   ,
{   11751.11110 ,    42814.444400  }   ,
{   11770.27780 ,    42651.944400  }   ,
{   11785.27780 ,    42884.444400  }   ,
{   11822.77780 ,    42673.611100  }   ,
{   11846.94440 ,    42660.555600  }   ,
{   11963.05560 ,    43290.555600  }   ,
{   11973.05560 ,    43026.111100  }   ,
{   12058.33330 ,    42195.555600  }   ,
{   12149.44440 ,    42477.500000  }   ,
{   12286.94440 ,    43355.555600  }   ,
{   12300.00000 ,    42433.333300  }   ,
{   12355.83330 ,    43156.388900  }   ,
{   12363.33330 ,    43189.166700  }   ,
{   12372.77780 ,    42711.388900  }   ,
{   12386.66670 ,    43334.722200  }   ,
{   12421.66670 ,    42895.555600  }   ,
{   12645.00000 ,    42973.333300  }
//    {   24748.3333  ,   50840.0000  }   , // KATAR
//{   24758.8889  ,   51211.9444  }   ,
//{   24827.2222  ,   51394.7222  }   ,
//{   24904.4444  ,   51175.0000  }   ,
//{   24996.1111  ,   51548.8889  }   ,
//{   25010.0000  ,   51039.4444  }   ,
//{   25030.8333  ,   51275.2778  }   ,
//{   25067.7778  ,   51077.5000  }   ,
//{   25100.0000  ,   51516.6667  }   ,
//{   25103.3333  ,   51521.6667  }   ,
//{   25121.9444  ,   51218.3333  }   ,
//{   25150.8333  ,   51537.7778  }   ,
//{   25158.3333  ,   51163.6111  }   ,
//{   25162.2222  ,   51220.8333  }   ,
//{   25167.7778  ,   51606.9444  }   ,
//{   25168.8889  ,   51086.3889  }   ,
//{   25173.8889  ,   51269.4444  }   ,
//{   25210.8333  ,   51394.1667  }   ,
//{   25211.3889  ,   51619.1667  }   ,
//{   25214.1667  ,   50807.2222  }   ,
//{   25214.4444  ,   51378.8889  }   ,
//{   25223.3333  ,   51451.6667  }   ,
//{   25224.1667  ,   51174.4444  }   ,
//{   25233.3333  ,   51333.3333  }   ,
//{   25234.1667  ,   51203.0556  }   ,
//{   25235.5556  ,   51330.0000  }   ,
//{   25235.5556  ,   51495.5556  }   ,
//{   25242.7778  ,   51428.8889  }   ,
//{   25243.0556  ,   51452.5000  }   ,
//{   25252.5000  ,   51559.1667  }   ,
//{   25253.8889  ,   51535.2778  }   ,
//{   25253.8889  ,   51549.7222  }   ,
//{   25256.9444  ,   51398.8889  }   ,
//{   25263.6111  ,   51516.3889  }   ,
//{   25265.8333  ,   51545.2778  }   ,
//{   25266.6667  ,   50969.1667  }   ,
//{   25266.6667  ,   51483.3333  }   ,
//{   25270.5556  ,   51532.7778  }   ,
//{   25270.8333  ,   51505.8333  }   ,
//{   25270.8333  ,   51523.0556  }   ,
//{   25275.8333  ,   51533.6111  }   ,
//{   25277.2222  ,   51547.7778  }   ,
//{   25278.3333  ,   51525.5556  }   ,
//{   25278.3333  ,   51541.3889  }   ,
//{   25279.1667  ,   51445.5556  }   ,
//{   25281.1111  ,   51535.0000  }   ,
//{   25281.3889  ,   51512.5000  }   ,
//{   25283.3333  ,   51533.3333  }   ,
//{   25283.6111  ,   51546.6667  }   ,
//{   25284.7222  ,   51555.2778  }   ,
//{   25286.1111  ,   51504.1667  }   ,
//{   25286.1111  ,   51534.1667  }   ,
//{   25286.6667  ,   51533.3333  }   ,
//{   25287.5000  ,   51537.7778  }   ,
//{   25288.0556  ,   51546.6667  }   ,
//{   25290.8333  ,   51528.3333  }   ,
//{   25291.9444  ,   51424.4444  }   ,
//{   25292.5000  ,   51520.8333  }   ,
//{   25298.6111  ,   51001.6667  }   ,
//{   25300.8333  ,   51394.4444  }   ,
//{   25306.9444  ,   51507.7778  }   ,
//{   25311.9444  ,   51003.0556  }   ,
//{   25313.8889  ,   50883.3333  }   ,
//{   25315.2778  ,   51438.6111  }   ,
//{   25316.6667  ,   50766.6667  }   ,
//{   25320.5556  ,   51495.5556  }   ,
//{   25322.5000  ,   51507.7778  }   ,
//{   25325.2778  ,   51470.0000  }   ,
//{   25326.6667  ,   51350.2778  }   ,
//{   25337.5000  ,   51425.0000  }   ,
//{   25339.1667  ,   51173.3333  }   ,
//{   25340.5556  ,   51293.6111  }   ,
//{   25341.9444  ,   51507.5000  }   ,
//{   25358.8889  ,   51333.6111  }   ,
//{   25363.6111  ,   51281.1111  }   ,
//{   25368.6111  ,   51226.3889  }   ,
//{   25374.4444  ,   51436.6667  }   ,
//{   25377.7778  ,   51294.7222  }   ,
//{   25396.9444  ,   51422.5000  }   ,
//{   25400.0000  ,   51183.3333  }   ,
//{   25400.0000  ,   51425.0000  }   ,
//{   25404.7222  ,   51073.0556  }   ,
//{   25416.9444  ,   51403.8889  }   ,
//{   25416.9444  ,   51457.7778  }   ,
//{   25419.4444  ,   50793.6111  }   ,
//{   25429.7222  ,   50785.8333  }   ,
//{   25433.3333  ,   51220.0000  }   ,
//{   25440.8333  ,   51378.0556  }   ,
//{   25444.4444  ,   50958.3333  }   ,
//{   25451.3889  ,   50925.0000  }   ,
//{   25459.1667  ,   51316.6667  }   ,
//{   25469.7222  ,   51397.5000  }   ,
//{   25478.0556  ,   51362.5000  }   ,
//{   25480.5556  ,   50938.8889  }   ,
//{   25483.3333  ,   51383.3333  }   ,
//{   25490.5556  ,   51373.6111  }   ,
//{   25492.2222  ,   51400.2778  }   ,
//{   25495.0000  ,   50846.6667  }   ,
//{   25495.0000  ,   50965.2778  }   ,
//{   25497.5000  ,   51485.2778  }   ,
//{   25500.8333  ,   50980.5556  }   ,
//{   25510.5556  ,   51242.2222  }   ,
//{   25531.9444  ,   51304.4444  }   ,
//{   25533.3333  ,   50977.2222  }   ,
//{   25538.8889  ,   51408.3333  }   ,
//{   25545.8333  ,   51387.5000  }   ,
//{   25549.7222  ,   51431.9444  }   ,
//{   25550.0000  ,   51433.3333  }   ,
//{   25560.2778  ,   51158.6111  }   ,
//{   25566.9444  ,   51484.7222  }   ,
//{   25567.5000  ,   50958.8889  }   ,
//{   25574.7222  ,   51486.3889  }   ,
//{   25585.5556  ,   51151.3889  }   ,
//{   25609.4444  ,   51092.2222  }   ,
//{   25610.2778  ,   51475.2778  }   ,
//{   25622.5000  ,   51454.4444  }   ,
//{   25645.8333  ,   51450.0000  }   ,
//{   25650.0000  ,   51372.2222  }   ,
//{   25666.9444  ,   51174.4444  }   ,
//{   25683.8889  ,   51505.8333  }   ,
//{   25686.3889  ,   51468.8889  }   ,
//{   25696.1111  ,   51260.8333  }   ,
//{   25700.8333  ,   51584.7222  }   ,
//{   25708.3333  ,   51591.6667  }   ,
//{   25716.6667  ,   51050.0000  }   ,
//{   25717.5000  ,   51057.7778  }   ,
//{   25723.0556  ,   51004.1667  }   ,
//{   25734.7222  ,   51547.5000  }   ,
//{   25751.1111  ,   51449.1667  }   ,
//{   25751.9444  ,   50920.8333  }   ,
//{   25758.3333  ,   51395.8333  }   ,
//{   25765.2778  ,   51019.7222  }   ,
//{   25772.2222  ,   51483.3333  }   ,
//{   25775.8333  ,   51023.0556  }   ,
//{   25779.1667  ,   51449.7222  }   ,
//{   25793.3333  ,   51409.4444  }   ,
//{   25808.3333  ,   51060.5556  }   ,
//{   25816.6667  ,   51133.3333  }   ,
//{   25823.6111  ,   51152.5000  }   ,
//{   25826.6667  ,   51043.8889  }   ,
//{   25829.7222  ,   51245.2778  }   ,
//{   25833.3333  ,   51072.2222  }   ,
//{   25839.1667  ,   51465.2778  }   ,
//{   25847.7778  ,   51205.8333  }   ,
//{   25850.0000  ,   51033.3333  }   ,
//{   25856.6667  ,   51083.3333  }   ,
//{   25857.5000  ,   51298.8889  }   ,
//{   25857.5000  ,   51441.3889  }   ,
//{   25866.6667  ,   51066.6667  }   ,
//{   25867.7778  ,   51205.5556  }   ,
//{   25871.9444  ,   51354.7222  }   ,
//{   25872.5000  ,   51258.3333  }   ,
//{   25880.8333  ,   51221.3889  }   ,
//{   25883.0556  ,   51185.2778  }   ,
//{   25888.0556  ,   51386.3889  }   ,
//{   25900.0000  ,   51000.0000  }   ,
//{   25904.1667  ,   51201.6667  }   ,
//{   25928.3333  ,   51337.5000  }   ,
//{   25937.5000  ,   51313.3333  }   ,
//{   25944.7222  ,   51456.3889  }   ,
//{   25950.0000  ,   51066.6667  }   ,
//{   25951.6667  ,   51349.7222  }   ,
//{   25957.7778  ,   51075.2778  }   ,
//{   25958.3333  ,   51099.4444  }   ,
//{   25966.6667  ,   51283.3333  }   ,
//{   25983.3333  ,   51400.0000  }   ,
//{   25983.6111  ,   51328.0556  }   ,
//{   26000.2778  ,   51294.4444  }   ,
//{   26008.6111  ,   51083.6111  }   ,
//{   26016.6667  ,   51333.3333  }   ,
//{   26021.6667  ,   51366.9444  }   ,
//{   26033.3333  ,   51116.6667  }   ,
//{   26033.3333  ,   51166.6667  }   ,
//{   26033.6111  ,   51163.8889  }   ,
//{   26033.6111  ,   51200.2778  }   ,
//{   26048.8889  ,   51056.9444  }   ,
//{   26050.0000  ,   51250.0000  }   ,
//{   26050.2778  ,   51297.5000  }   ,
//{   26050.5556  ,   51135.8333  }   ,
//{   26055.0000  ,   51316.1111  }   ,
//{   26067.2222  ,   51258.6111  }   ,
//{   26074.7222  ,   51083.6111  }   ,
//{   26076.6667  ,   51166.9444  }   ,
//{   26077.2222  ,   51222.2222  }   ,
//{   26078.0556  ,   51361.6667  }   ,
//{   26083.6111  ,   51147.2222  }   ,
//{   26099.7222  ,   51161.1111  }   ,
//{   26108.0556  ,   51244.7222  }   ,
//{   26116.6667  ,   51216.6667  }   ,
//{   26123.6111  ,   51169.1667  }   ,
//{   26123.6111  ,   51222.7778  }   ,
//{   26133.3333  ,   51216.6667  }   ,
//{   26133.3333  ,   51300.0000  }   ,
//{   26150.2778  ,   51108.0556  }

    };
        public struct Osobnik
        {
            int[] gen;
            public int[] Gen
            {
                get { return gen; }
                set { gen = value; }
            }
            public int[] Fenotyp()
            {
                return gen;
            }
            public void MutacjaDwieKrawedzie()
            {
                int i1 = los.Next(Gen.Length);
                int i2 = los.Next(Gen.Length - i1);
                Array.Reverse(Gen, i1, i2);
                return;
            }
            public Osobnik PMX(Osobnik rodzic)
            {
                Osobnik potomek = new Osobnik();
                int[] mama = Gen;
                int[] tata = rodzic.Gen;
                int[] dziecko = new int[mama.Length];
                int los_1 = los.Next(1, dziecko.Length / 2);
                int los_2 = los.Next(dziecko.Length / 2, dziecko.Length);
                int[] odwzorowanie = new int[los_2 - los_1];
                int[] fragment = new int[los_2 - los_1];
                for (int i = 0; i < dziecko.Length; i++)
                    dziecko[i] = -1;

                for (int i = los_1 + 1; i < los_2 + 1; i++)
                {
                    dziecko[i] = tata[i];
                }
                for (int i = 0; i < odwzorowanie.Length; i++)
                {
                    odwzorowanie[i] = mama[los_1 + 1 + i];
                    fragment[i] = tata[los_1 + 1 + i];
                }
                for (int i = 0; i < dziecko.Length; i++)
                {
                    if (dziecko[i] == -1)
                    {
                        if (!fragment.Contains(mama[i]))
                        {
                            dziecko[i] = mama[i];
                        }
                        else
                        {
                            dziecko[i] = mama[i];
                            while (fragment.Contains(dziecko[i]))
                            {
                                int t = fragment.findIndex(dziecko[i]);
                                dziecko[i] = odwzorowanie[t];
                            }
                        }
                    }
                }
                potomek.Gen = dziecko;
                return potomek;
            }
            public Osobnik CX(Osobnik rodzic)
            {
                Osobnik potomek = new Osobnik();
                int[] mama = Gen;
                int[] tata = rodzic.Gen;
                int[] dziecko = new int[mama.Length];
                for (int i = 0; i < dziecko.Length; i++)
                    dziecko[i] = -1;

                dziecko[0] = mama[0];
                int idx = 0;
                bool flag = false;
                int[] tmp;
                while (!flag)
                {
                    tmp = (int[])dziecko.Clone();
                    dziecko[mama.findIndex(tata[idx])] = tata[idx];
                    idx = dziecko.findIndex(tata[idx]);
                    if (tmp.SequenceEqual(dziecko)) flag = true;
                }

                for (int i = 0; i < dziecko.Length; i++)
                {
                    if (dziecko[i] == -1)
                        dziecko[i] = tata[i];
                }
                potomek.Gen = dziecko;
                return potomek;
            }
            public Osobnik RekombinacjaCX(Osobnik o1)
            {
                Osobnik potomek = CX(o1);
                if (los.NextDouble() <= 0.2)
                    potomek.MutacjaDwieKrawedzie();

                return potomek;
            }
            public Osobnik RekombinacjaPMX(Osobnik o1)
            {
                Osobnik potomek = PMX(o1);
                if (los.NextDouble() <= 0.2)
                    potomek.MutacjaDwieKrawedzie();

                return potomek;
            }
        }

        public static int Ocena(int[] droga)
        {
            int wynik = 0;
            for (int i = 0; i < droga.GetLength(0) - 1; i++)
            {
                int tmp = ObliczOdlegosc(miasta[droga[i], 0], miasta[droga[i], 1], miasta[droga[i + 1], 0], miasta[droga[i + 1], 1]);
                wynik = wynik + tmp;
            }
            // odcinek ostatni-pierwsze miasto
            wynik = wynik + ObliczOdlegosc(miasta[droga[droga.Length - 1], 0], miasta[droga[droga.Length - 1], 1], miasta[droga[0], 0], miasta[droga[0], 1]);
            return wynik;
        }
        public static Osobnik[] PopulacjaStartowa(int rozmiar)
        {
            Osobnik[] populacja = new Osobnik[rozmiar];
            for (int i = 0; i < rozmiar; i++)
            {
                populacja[i] = Losowanie(miasta.GetLength(0));
            }
            return populacja;
        }
        public static Osobnik Losowanie(int rozmiar)
        {
            Osobnik osobnik = new Osobnik();
            int[] wynik = new int[rozmiar];
            for (int i = 0; i < rozmiar; i++)
            {
                wynik[i] = i;
            }
            for (int i = 0; i < rozmiar; i++)
            {
                int i1 = los.Next(0, rozmiar);
                int i2 = los.Next(0, rozmiar);
                int x = wynik[i1];
                wynik[i1] = wynik[i2];
                wynik[i2] = x;
            }

            osobnik.Gen = wynik;
            return osobnik;
        }
        public static Osobnik Turniej(Osobnik[] populacja)
        {
            int i1 = los.Next(populacja.Length);
            int i2 = los.Next(populacja.Length);
            if (Ocena(populacja[i1].Gen) <= Ocena(populacja[i2].Gen))
                return populacja[i1];
            return populacja[i2];
        }
        public static int ObliczOdlegosc(double lon1, double lat1, double lon2, double lat2)
        {
            int dist = Convert.ToInt32(Math.Round(Math.Sqrt(Math.Pow(lon1 - lon2, 2) + Math.Pow(lat1 - lat2, 2))));
            return dist;
        }
        public static int Mediana(int[] dane)
        {
            Array.Sort(dane);
            return dane[dane.Length / 2];
        }
        public static int Niebo(int[] dane)
        {
            Array.Sort(dane);
            return dane[0];
        }
        static void Main(string[] args)
        {
            int rPopulacja = 50;
            int rPokolen = 4000;
            for (int j = 0; j < 1; j++)
            {
                Stopwatch sw = new Stopwatch();
                sw.Start();
                Osobnik[] populacja = PopulacjaStartowa(rPopulacja);
                int[][] arr = new int[rPokolen][];
                int[] dane = new int[rPokolen];
                for (int nr_pokolenia = 0; nr_pokolenia < rPokolen; nr_pokolenia++)
                {
                    Osobnik[] populacja_nowa = new Osobnik[populacja.Length];
                    for (int i = 0; i < populacja_nowa.Length; i++)
                    {
                        Osobnik mama = Turniej(populacja);
                        Osobnik tata = Turniej(populacja);
                        populacja_nowa[i] = mama.RekombinacjaPMX(tata);
                    }
                    if(nr_pokolenia % 100 == 0)
                    {
                        Console.WriteLine("Najlepszy wynik pierwszej populacji z pokolenia nr {0}: {1}", nr_pokolenia, Ocena(populacja_nowa[0].Gen));
                    }
                    populacja = populacja_nowa;
                    arr[nr_pokolenia] = populacja[0].Gen;
                    dane[nr_pokolenia] = Ocena(populacja[0].Gen);
                }
                sw.Stop();
                Console.WriteLine("{0},{1},{2}", Mediana(dane), Niebo(dane), sw.Elapsed);

            }
            Console.ReadKey();
        }
    }
}